{
  "gif": {
    "caption": "When I run my code to see how it behaves (via https://thecodinglove.com)",
    "gifURL": "gif-21.mp4"
  },
  "tip_of_the_week": {
    "codeSnippet": {
      "code": {
        "code": "flushSync(() => {\n  setSomething(123);\n});\n// By this line, the DOM is updated."
      },
      "language": "ts"
    },
    "sourceURL": "https://react.dev/reference/react-dom/flushSync",
    "sourceName": "React Docs",
    "description": "`flushSync` lets you force React to flush any state updates inside the callback synchronously. This ensures that, by the time the next line of code runs, React has already updated the DOM.",
    "title": "Synchronously update DOM with `flushSync`"
  },
  "talks": [
    {
      "url": "https://www.youtube.com/watch?v=aolI_Rz0ZqY",
      "description": "Scott Chacon's FOSDEM 2024 talks about Git Tips and Tricks including configs, monorepo, and more.",
      "title": "So You Think You Know Git",
      "authors": [
        "Scott Chacon"
      ],
      "tags": [
        "Git"
      ]
    }
  ],
  "date": "2024-05-01T17:09:00.000Z",
  "quiz": {
    "question": "How can we log the values that are commented out after the console.log statement?",
    "answerId": 3,
    "codeSnippet": {
      "language": "js",
      "code": {
        "code": "function* startGame() {\n  const answer = yield 'Do you love JavaScript?';\n  if (answer !== 'Yes') {\n    return \"Oh wow... Guess we're done here\";\n  }\n  return 'JavaScript loves you back ❤️';\n}\n\nconst game = startGame();\nconsole.log(/* 1 */); // Do you love JavaScript?\nconsole.log(/* 2 */); // JavaScript loves you back ❤️"
      },
      "showLineNumbers": true
    },
    "options": [
      {
        "text": "`game.next(\"Yes\").value` and `game.next().value`",
        "description": "Uh-oh, you missed the class where generator functions were taught, right? no worries, try again after reading about [generator functions on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).",
        "option_id": 1
      },
      {
        "text": "`game.next.value(\"Yes\")` and `game.next.value()`",
        "description": "Almost there but no. Try again after reading about [generator functions on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).",
        "option_id": 2
      },
      {
        "text": "`game.next().value` and `game.next(\"Yes\").value`",
        "description": "A [generator function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) \"pauses\" its execution when it sees the `yield` keyword. First, we have to let the function yield the string \"Do you love JavaScript?\", which can be done by calling `game.next().value`.\n\nEvery line is executed, until it finds the first `yield` keyword. There is a `yield` keyword on the first line within the function: the execution stops with the first yield! This means that the variable answer is not defined yet!\n\nWhen we call `game.next(\"Yes\").value`, the previous yield is replaced with the value of the parameters passed to the `next()` function, \"Yes\" in this case. The value of the variable answer is now equal to \"Yes\". The condition of the if-statement returns `false`, and JavaScript loves you back ❤️ gets logged. (Via [JavaScript Questions by Lydia](https://github.com/lydiahallie/javascript-questions))",
        "option_id": 3
      },
      {
        "text": "`game.next.value()` and `game.next.value(\"Yes\")`",
        "description": "No, you're confusing methods and properties here. Please check again how[ generator functions work on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).",
        "option_id": 4
      }
    ]
  },
  "isDraft": true,
  "title": "Exploring React 19 Beta, Understanding Edge Computing, Mastering Git, and more",
  "id": 21,
  "tools": [
    {
      "name": "svgl",
      "description": "A beautiful library to grab SVG logos of all companies.",
      "url": "https://svgl.app/",
      "authors": [
        "Pablo Hdez"
      ],
      "tags": [
        "Design",
        "Front-End",
        "Graphics"
      ],
      "logo": "svgl.svg"
    },
    {
      "name": "Lightning CSS",
      "description": "An extremely fast CSS parser, transformer, bundler, and minifier written in Rust.",
      "url": "https://lightningcss.dev/",
      "authors": [
        "Devon Govett"
      ],
      "tags": [
        "CSS",
        "Front-End"
      ],
      "logo": "lightning-css.svg"
    }
  ],
  "description": "Learn about flushSync in React, easily grab SVGs for all major companies, changes in React 19, and a lightning fast CSS parser.",
  "articles": [
    {
      "title": "React 19 Beta",
      "description": "React just dropped the beta of their new major release, and it comes with a lot of new features and fixes this time around, which includes stable APIs for actions, better error messages, ability to pass ref as a prop without using forwardRef and so much more.",
      "url": "https://react.dev/blog/2024/04/25/react-19",
      "authors": [
        "The React Team"
      ],
      "tags": [
        "React"
      ]
    },
    {
      "title": "What is Edge Compute? It’s kind of like knitting dog hats",
      "description": "Join Austin as he explains what edge compute is, why it exists and why should you care about it with a great analogy of knitting dog hats.",
      "url": "https://austingil.com/edge-compute-knitted-dog-hats/",
      "authors": [
        "Austin Gil"
      ],
      "tags": [
        "Optimization",
        "Backend"
      ]
    }
  ]
}
